service: alexandria-functions

plugins:
  - serverless-go-plugin
  - serverless-domain-manager

package:
  individually: true

provider:
  name: aws
  architecture: arm64
  deploymentMethod: direct
  runtime: provided.al2023
  versionFunctions: false
  memorySize: 128
  stage: dev
  region: eu-central-1
  endpointType: REGIONAL
  profile: default
  logRetentionInDays: 7
  apiGateway:
    disableDefaultEndpoint: true
    minimumCompressionSize: 1024 # in bytes
  tags:
    application: 'alexandria'
    owner: 'serverless'
  stackTags:
    application: 'alexandria'
    owner: 'serverless'
  deploymentBucket:
    blockPublicAccess: true
    tags:
      application: 'alexandria'
      owner: 'serverless'

custom:
  dynamoDbTableName: alexandria
  picturesBucketName: alexandria-pictures
  imagesProcessorImage: 671123374425.dkr.ecr.eu-central-1.amazonaws.com/alexandria/images-processing
  snsTopicArn: arn:aws:sns:eu-central-1:671123374425:alerting-events
  customDomain:
    domainName: api-alexandria.isnan.eu
    certificateArn: arn:aws:acm:eu-central-1:671123374425:certificate/8d1a300b-075e-4771-a7bd-c6dd00cb594f
    hostedZoneId: ZWC66FN0XU6P9
    stage: ${self:provider.stage}
    autoDomain: true
    createRoute53Record: true
    endpointType: ${self:provider.endpointType}
  go:
    supportedRuntimes: ['provided.al2023']
    buildProvidedRuntimeAsBootstrap: true
    cmd: GOARCH=arm64 GOOS=linux go build -ldflags="-s -w"

functions:
  api:
    handler: api/cmd/main.go
    name: alexandria-api
    role: ApiRole
    runtime: provided.al2023
    environment:
      DYNAMODB_TABLE_NAME: ${self:custom.dynamoDbTableName}
      S3_PICTURES_BUCKET: ${self:custom.picturesBucketName}
      REGION: ${self:provider.region}
    events:
      - http:
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
          method: get
          path: /v1/libraries
          cors: true
      - http:
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
          method: post
          path: /v1/libraries
          cors: true
      - http:
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
          method: any
          path: /v1/libraries/{proxy+}
          cors: true
      - http:
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
          method: post
          path: /v1/detections
          cors: true
  search:
    handler: search/handler.handle
    name: alexandria-search
    role: SearchRole
    runtime: nodejs20.x
    environment:
      DYNAMODB_TABLE_NAME: ${self:custom.dynamoDbTableName}
      S3_PICTURES_BUCKET: ${self:custom.picturesBucketName}
      REGION: ${self:provider.region}
    events:
      - http:
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
          method: post
          path: /v1/search
          cors: true
  pre-signup:
    handler: pre-signup/cmd/main.go
    name: alexandria-pre-signup
    role: PreSignupRole
    runtime: provided.al2023
    environment:
      SNS_TOPIC_ARN: ${self:custom.snsTopicArn}
      REGION: ${self:provider.region}
    events:
      - cognitoUserPool:
          pool: AlexandriaUserPool
          trigger: PreSignUp
  images-processor:
    name: alexandria-image-processor
    image: ${self:custom.imagesProcessorImage}:latest
    role: ImagesProcessorRole
    runtime: nodejs20.x
    memorySize: 512
    environment:
      S3_PICTURES_BUCKET: ${self:custom.picturesBucketName}
      REGION: ${self:provider.region}
    events:
      - s3:
          bucket: !Ref PicturesStorage
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - prefix: incoming/

resources:
  Resources:
    ApiRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: alexandria-api
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: alexandria-api
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - logs:TagResource
                  Resource:
                    - Fn::Join:
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - dynamodb:BatchExecuteStatement
                    - dynamodb:BatchGetItem
                    - dynamodb:BatchWriteItem
                    - dynamodb:DeleteItem
                    - dynamodb:ExecuteStatement
                    - dynamodb:ExecuteTransaction
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:TransactGetItems
                    - dynamodb:TransactWriteItems
                    - dynamodb:UpdateItem
                  Resource:
                    - !GetAtt DynamoTable.Arn
                    - Fn::Join:
                        - ''
                        - - 'arn:aws:dynamodb:'
                          - Ref: 'AWS::Region'
                          - ':'
                          - Ref: 'AWS::AccountId'
                          - ':table/'
                          - ${self:custom.dynamoDbTableName}
                          - '/index/*'
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:PutObjectTagging
                    - s3:GetObject
                    - s3:ListBucket
                    - s3:GetObjectTagging
                    - s3:DeleteObject
                  Resource:
                    - Fn::Join:
                        - ''
                        - - 'arn:aws:s3:::'
                          - Ref: PicturesStorage
                          - '/*'
                    - !GetAtt PicturesStorage.Arn
    SearchRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: alexandria-search
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: alexandria-api
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - logs:TagResource
                  Resource:
                    - Fn::Join:
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                  Resource:
                    - !GetAtt DynamoTable.Arn
                    - Fn::Join:
                        - ''
                        - - 'arn:aws:dynamodb:'
                          - Ref: 'AWS::Region'
                          - ':'
                          - Ref: 'AWS::AccountId'
                          - ':table/'
                          - ${self:custom.dynamoDbTableName}
                          - '/index/*'
                - Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:ListBucket
                  Resource:
                    - Fn::Join:
                        - ''
                        - - 'arn:aws:s3:::'
                          - Ref: PicturesStorage
                          - '/*'
                    - !GetAtt PicturesStorage.Arn
    PreSignupRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: alexandria-presignup
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: alexandria-presignup
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - logs:TagResource
                  Resource:
                    - Fn::Join:
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow # Allow slack notification via the alerter topic
                  Action:
                    - sns:Publish
                  Resource: ${self:custom.snsTopicArn}
    ImagesProcessorRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: alexandria-presignup
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - logs:TagResource
                  Resource:
                    - Fn::Join:
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:GetObjectTagging
                    - s3:PutObject
                    - s3:PutObjectTagging
                    - s3:ListBucket
                  Resource:
                    - Fn::Join:
                        - ''
                        - - 'arn:aws:s3:::'
                          - Ref: PicturesStorage
                          - '/*'
                    - !GetAtt PicturesStorage.Arn
    CognitoUserPoolAlexandriaUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: alexandria
        UsernameConfiguration:
          CaseSensitive: false
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: admin_only
              Priority: 1
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true
            TemporaryPasswordValidityDays: 7
        UserPoolAddOns:
          AdvancedSecurityMode: OFF
        Schema:
          - Name: DisplayName
            AttributeDataType: String
            StringAttributeConstraints:
              MinLength: 1
              MaxLength: 20
        UserPoolTags:
          application: 'alexandria'
          owner: 'serverless'
    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref CognitoUserPoolAlexandriaUserPool
        ClientName: alexandria-auth-client
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_USER_SRP_AUTH
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 10
        IdentitySource: method.request.header.Authorization
        Name: alexandria-api-authorizer
        RestApiId: !Ref ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::Join:
              - ''
              - - 'arn:aws:cognito-idp:'
                - Ref: 'AWS::Region'
                - ':'
                - Ref: 'AWS::AccountId'
                - ':userpool/'
                - Ref: CognitoUserPoolAlexandriaUserPool
    DynamoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.dynamoDbTableName}
        TableClass: STANDARD
        TimeToLiveSpecification:
          AttributeName: ExpiresAt
          Enabled: true
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: GSI1PK
            AttributeType: S
          - AttributeName: GSI1SK
            AttributeType: S
          - AttributeName: GSI2PK
            AttributeType: S
          - AttributeName: GSI2SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: GSI1
            KeySchema:
              - AttributeName: GSI1PK
                KeyType: HASH
              - AttributeName: GSI1SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: GSI2
            KeySchema:
              - AttributeName: GSI2PK
                KeyType: HASH
              - AttributeName: GSI2SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
    PicturesStorage:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.picturesBucketName}
        LifecycleConfiguration:
          Rules:
            - Id: IncomingPicturesRule
              Status: Enabled
              ExpirationInDays: 1
              Prefix: incoming
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        Tags:
          - Key: application
            Value: alexandria
          - Key: owner
            Value: serverless
  Outputs:
    UserPoolId:
      Value: !Ref CognitoUserPoolAlexandriaUserPool
      Export:
        Name: alexandriaUserPoolId
    UserPoolClientId:
      Value: !Ref UserPoolClient
      Export:
        Name: alexandriaClientId
